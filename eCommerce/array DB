Before setting a DB we worked with arrays and
this is what we needed to do it:

- underscore library: allowed us to use  '_.findIndex' in order
to find indexes with data we needed

- uuidv4 library: allows us to create random ids before storinng our records 
in the array. This is bc untill here we are not using a DB like mongo so 
we needed to have ids that in mongo (or other DB) are created automatically  

Ex:
  
  const index = _.findIndex(users, user => user.id === jwtPayload.id)
  if (index === -1){
        logger.warn(`JWT not valid. User with id ${ jwtPayload.id } couldn't be found...`)
        next(null, false)
    } else {
        logger.info(`User ${ users[index].username } has provided a valid token and has been authenticated `)
        //next(null, 'hello')
        next(null, {
            username: users[index].username,
            id: users[index].id
        })
    }

    for users:

    const index = _.findIndex(users, user => {
        return user.username === newUser.username || user.email === newUser.email
    })
    if (index !== -1){
        logger.info('username or email already registered...')
        res.status(409).send(`User with username: [${newUser.username}] already exists`)
        return
    }
    bcrypt.hash(newUser.password, 10, ( err, hashedPassword ) => {
        if (err){
            logger.error('An error Ocurred when we try to get hash of user`s password', err)
            res.status(500).send('An error ocurred processing user creation process')
            return 
        }
        //  newUser.id = uuidv4()    
        //  users.push(newUser)
        users.push({
            username: newUser.username,
            email: newUser.email,
            password: hashedPassword,
            id: uuidv4()
        })    
        logger.info(`User [${newUser.username}] has been created...`)
        res.status(201).send(`User [${newUser.username}] has been created...`)
    })