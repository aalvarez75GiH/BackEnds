Before setting a DB we worked with arrays and
this is what we needed to do it:

- underscore library: allowed us to use  '_.findIndex' in order
to find indexes with data we needed

- uuidv4 library: allows us to create random ids before storinng our records 
in the array. This is bc untill here we are not using a DB like mongo so 
we needed to have ids that in mongo (or other DB) are created automatically  

Ex:
  
  const index = _.findIndex(users, user => user.id === jwtPayload.id)
  if (index === -1){
        logger.warn(`JWT not valid. User with id ${ jwtPayload.id } couldn't be found...`)
        next(null, false)
    } else {
        logger.info(`User ${ users[index].username } has provided a valid token and has been authenticated `)
        //next(null, 'hello')
        next(null, {
            username: users[index].username,
            id: users[index].id
        })
    }

    for users:

    const index = _.findIndex(users, user => {
        return user.username === newUser.username || user.email === newUser.email
    })
    if (index !== -1){
        logger.info('username or email already registered...')
        res.status(409).send(`User with username: [${newUser.username}] already exists`)
        return
    }
    bcrypt.hash(newUser.password, 10, ( err, hashedPassword ) => {
        if (err){
            logger.error('An error Ocurred when we try to get hash of user`s password', err)
            res.status(500).send('An error ocurred processing user creation process')
            return 
        }
        //  newUser.id = uuidv4()    
        //  users.push(newUser)
        users.push({
            username: newUser.username,
            email: newUser.email,
            password: hashedPassword,
            id: uuidv4()
        })    
        logger.info(`User [${newUser.username}] has been created...`)
        res.status(201).send(`User [${newUser.username}] has been created...`)
    })


Mas codigo:
  My Try catch
     try {
         const productToDelete = await productController.getOneProduct(id)
         if(!productToDelete){
             logger.info(`Product with id [${id}] do not exists at DB...`)
             res.status(404).send(`Product with id [${id}] do not exists at DB...`)    
             return   
         }
         if(productToDelete.owner !== userWantDelete){
             logger.info(`User ${userWantDelete} do not own Product with id ${id}. it can not be deleted`)
             res.status(401).send(`Sorry, you are not the owner of Product ID ${id} 
                 you can not delete it if you are not the owner`)
             return
         }
         const productDeleted = await productController.deleteProduct(id)
         logger.info(`Product with id [${id}] was deleted successfully...`)
         res.json(productDeleted)
     } catch (error) {
         logger.error(`there was an exception error...`)
         res.status(500).send(`Error occurred deleting product with ID[${id}]`)
     }

      My Promise with .then
     productController.deleteProduct(id)
     .then(productToDelete => {
         if(!productToDelete){
             logger.error(`Product with id [${id}] do not exists at DB...`)
             res.status(404).send(`Product with id [${id}] do not exists at DB...`)
         }else{
             logger.info(`Product with id [${id}] has been deleted from DB successfully...`)
             res.status(201).json(productToDelete)
         }
        
     })
     .catch(error => {
         logger.error(`Error: There was an exception when we tried to get Product with id: [${id}]`)
         res.status(500).send(`Error: There was an exception when we tried to get Product with id: [${id}]`)
     })

     end points with try/catch and Promises:

interested users:

intUsersRouter.get('/', (req,res)=> {
    interestedUsersController.getInterestedUsers()
    .then(interestedUsers => {
        res.status(201).json(interestedUsers)
    })
    .catch(error => {
        logger.error('Sorry, we had a problem when we were reading at DB...')
        res.status(500).send('Sorry, we had a problem when we were reading at DB...')
    })
})

(with Promise)
intUsersRouter.post('/', [validateUsers, transformBodyToLowerCase], (req, res)=>{
    let newUser = req.body
    interestedUsersController.findInterestedUser(newUser)
    .then(foundInterestedUser => {
        if (foundInterestedUser){
            logger.info(` User with email ${newUser.email} already enrolled as interested User `)
            res.status(409).send(`${newUser.fullName}`)
            return
        }
        interestedUsersController.createInterestedUser(newUser)
        .then(interestedUser => {
            logger.info(`User [${interestedUser.email}] has been created...`)
            res.status(201).send(`${interestedUser.fullName}`)
        })
        .catch(error => {
            logger.error('Interested User could not be added to collection...', error)
            res.status(500).send('Interested user could not be added to collection...')
        })
    })
    .catch( error => {
        logger.error('An Error has occurred trying to find user at DB', error)
        res.status(500).send('Interested user could not be found due to an error')
    })        
})

(with try/catch)
intUsersRouter.post('/', [validateUsers, transformBodyToLowerCase], async(req, res)=>{
    let newUser = req.body
    let foundInterestedUser
    
    try {
        foundInterestedUser = await interestedUsersController.findInterestedUser(newUser) 
    } catch (error) {
        logger.error('An Error has occurred trying to find user at DB', error)
        res.status(500).send('Interested user could not be found due to an error')
        return
    }

    if (foundInterestedUser){
        logger.info(` User with email ${newUser.email} is already registered as interested User `)
        res.status(409).send(`${newUser.fullName}`)
        return
    }

    try {
        const interestedUser = await interestedUsersController.createInterestedUser(newUser)
        logger.info(`User [${interestedUser.email}] has been created...`)
        res.status(201).send(`${interestedUser.fullName}`)
    } catch (error) {
        logger.error('Interested User could not be added to collection...', error)
        res.status(500).send('Interested user could not be added to collection...')
        return
    }
           
})

users: 

usersRouter.get('/', (req,res)=> {
    userController.getUsers()
    .then(users => {
        res.status(201).json(users)
    })
    .catch(error => {
        logger.error('There has been a problem getting Users from database', error)
        res.status(500).send('There has been a problem getting Users from database')
    })
})

usersRouter.post('/', [validateUsers, transformBodyToLowerCase], (req, res)=>{
    let newUser = req.body

    userController.findUser(newUser)
    .then(foundUser =>{
        if (foundUser){
            logger.info(`User with ${newUser.email} already registered...`)
            res.status(409).send(newUser.fullName)
            return
        }
        bcrypt.hash(newUser.password, 10, (error, hashedPassword) =>{
            if (error){
                logger.error('An error Ocurred when we try to get hash of user`s password', err)
                res.status(500).send('An error ocurred while trying to hash password...')
                return
            }
            userController.createUser(newUser, hashedPassword)
            .then(user => {
                logger.info(`User with [${user.email}] has been created...`)
                res.status(201).send(user.fullName)
            })
            .catch(error => {
                logger.error('An error Ocurred when we try to get hash of user`s password', error)
                res.status(500).send('An error ocurred processing user creation process')
            })
        })
    })
    .catch(error => {
        logger.error(`An error Ocurred when we try to verify if user 
        with email [${newUser.email}] does exists at DB`, error)
        res.status(500).send('An error ocurred processing verification...')
    })
})

// ****************************** with async/await
usersRouter.post('/login', [validateLoginRequest, transformBodyToLowerCase], async( req, res ) => {
    const notAuthUser = req.body
    let foundUser

    try {
        foundUser = await userController.findUserForLogin({ email: notAuthUser.email })    
    
    } catch (error) {
        logger.error(`An error Ocurred when we try to verify if user 
        with email [${notAuthUser.email}] does exists at DB`, error)
        res.status(500).send('An error ocurred processing verification...')
        return
    }
    if (!foundUser){
        logger.info(`User with email ${notAuthUser.email} was not found at DB`)
        res.status(400).send(`${notAuthUser.email}`)
        return
    }

    const hashedPassword = foundUser.password
    let correctPassword

    try {
        correctPassword = await bcrypt.compare(notAuthUser.password, hashedPassword)
    
    } catch (error) {
        logger.info(`Compare passwords process failed...`)
        res.status(500).send('There was an error when comparing passwords')
        return
    }
    
    if(correctPassword){
        const token = jwt.sign({id: foundUser.id},
        config.jwt.secret, {
            expiresIn: 60 * 60 * 24 * 365
        })
        logger.info(`User [${notAuthUser.email}] has been authenticated succesfully...`)
        res.status(200).send({token})        
    }else{
        logger.info(`User with email ${notAuthUser.email} didn't complete authentication process`)
        res.status(400).send(`email or password incorrect, check your credentials and try again...`)     
    }
})

// with Promise
// usersRouter.post('/login', [validateLoginRequest, transformBodyToLowerCase], ( req, res ) => {
//     const notAuthUser = req.body

//     userController.findUserForLogin(notAuthUser)
//     .then(foundUser => {
//         if (!foundUser){
//             logger.info(`User with email ${notAuthUser.email} was not found at DB`)
//             res.status(400).send(`${notAuthUser.email}`)
//             return
//         }
//         const hashedPassword = foundUser.password
//         bcrypt.compare(notAuthUser.password, hashedPassword, (error, match)=>{
//             if (match){
//                 const token = jwt.sign({id: foundUser.id},
//                 config.jwt.secret, {
//                     expiresIn: 60 * 60 * 24 * 365
//                 })
//                 logger.info(`User [${notAuthUser.email}] has been authenticated succesfully...`)
//                 res.status(200).send({token})
//                 return    
//             }else{
//                 logger.info(`User with email ${notAuthUser.email} didn't complete authentication process`)
//                 res.status(400).send(`email or password incorrect, check your credentials and try again...`)    
//             }    
//         })
//     })
//     .catch(error => {
//         logger.error(`An error Ocurred when we try to verify if user 
//         with email [${notAuthUser.email}] does exists at DB`, error)
//         res.status(500).send('An error ocurred processing verification...')
//     })
// })


usersRouter.get('/me', jwtAuthorization, (req,res) => {
    let dataUser = req.user.fullName
    logger.info(dataUser)
    res.send(dataUser)
})



































